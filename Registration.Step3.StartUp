using CustomIdentityApp.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
 
namespace CustomIdentityApp
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }
 
        public IConfiguration Configuration { get; }
 
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ApplicationContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
 
            services.AddIdentity<UserOfApp, IdentityRole>()
                .AddEntityFrameworkStores<ApplicationIdentityContext>();
/*
          Метод AddIdentity() позволяет установить некоторую начальную конфигурацию. 
          Здесь мы указываем тип пользователя и тип роли, которые будут использоваться системой Identity. 
          В качестве типа пользователя выступает созданный нами выше класс UserOfApp, 
          а в качестве типа роли взят стандартный класс IdentityRole, 
          который находится в пространстве имен Microsoft.AspNetCore.Identity.EntityFrameworkCore.


          А НАМ ВООБЩЕ НУЖНА ЭТА IdentityRole?


          Метод AddEntityFrameworkStores() устанавливает тип хранилища, которое будет применяться в Identity для хранения данных. 
          В качестве типа хранилища здесь указывается класс контекста данных.


*/


          
          
                 
            services.AddControllersWithViews();
        }
 
        public void Configure(IApplicationBuilder app)
        {
            app.UseDeveloperExceptionPage();
 
            app.UseHttpsRedirection();
            app.UseStaticFiles();
 
            app.UseRouting();
 
            app.UseAuthentication();    // подключение аутентификации
            app.UseAuthorization();
 
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });

          /*
          Затем, чтобы использовать Identity, в методе Configure() устанавливается компонент middeware - UseAuthentication. 
          Причем это middleware вызывается перед app.UseEndpoints(), 
          тем самым гарантируя, что ко времени обращения к системе маршрутизации, контроллерам и их методам, куки должным образом обработаны и установлены.

          А РАЗВЕ ОБЯЗАТЕЛЬНО КУКИ? КАК ТУТ ПЕРЕДЕЛАТЬ НА JWT-токен? 
          Потому что по аутентификации и авторизации через JWT-токен материалов полно, а вот по регистрации и созданию Identity я не нашел материал...

          */


        }
    }
}
